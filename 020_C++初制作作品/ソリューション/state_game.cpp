
//-===============================================
//-
//-	ゲームステータス処理[state_game.cpp]
//- Author Sakai Minato
//-
//-===============================================

//-======================================
//-	インクルード
//-======================================

#include "state_game.h"

#include "renderer.h"
#include "manager.h"
#include "state_game.h"

//-======================================
//-	マクロ定義
//-======================================

//-======================================
//-	静的変数宣言
//-======================================

//-------------------------------------
//-	ゲームステータスのコンストラクタ
//-------------------------------------
CStateGame::CStateGame()
{
	m_endState = END_STATE_NONE;
}

//-------------------------------------
//-	ゲームステータスのデストラクタ
//-------------------------------------
CStateGame::~CStateGame()
{

}

//-------------------------------------
//- ゲームステータスの初期化処理
//-------------------------------------
void CStateGame::Init(void)
{
	// 初期設定処理
	InitSet();
}

//-------------------------------------
//- ゲームステータスの終了処理
//-------------------------------------
void CStateGame::Uninit(void)
{

}

//-------------------------------------
//- ゲームステータスの生成処理
//-------------------------------------
CStateGame *CStateGame::Create(void)
{
	// アイテムのポインタを宣言
	CStateGame *pCStateGame = DBG_NEW CStateGame;

	// 生成の成功の有無を判定
	if (pCStateGame != NULL)
	{
		// 初期化処理
		pCStateGame->Init();
	}
	else if (pCStateGame == NULL)
	{// 失敗時

		// 「なし」を返す
		return NULL;
	}

	// アイテムのポインタを返す
	return pCStateGame;
}

//-------------------------------------
//- ゲームステータスの敵の死亡
//-------------------------------------
void CStateGame::AddEnemyDeath(void)
{
	// 変数宣言（情報取得）
	int nEnemyDeathCut = m_nDataEnemyDeathCut.Get();	// 敵の死亡数カウント

	// 敵の死亡数を増やす
	nEnemyDeathCut++;

	// 情報更新
	m_nDataEnemyDeathCut.Set(nEnemyDeathCut);			// 敵の死亡数カウント
}

//-------------------------------------
//- ゲームステータスの終了状態の設定処理
//-------------------------------------
void CStateGame::SetEndState(END_STATE endState)
{
	// 終了状態の代入
	m_endState = endState;
}

//-------------------------------------
//- ゲームステータスの終了状態の取得処理
//-------------------------------------
CStateGame::END_STATE CStateGame::GetEndState(void)
{
	return m_endState;
}

//-------------------------------------
//- ゲームステータスの初期設定処理
//-------------------------------------
void CStateGame::InitSet(void)
{
	m_nDataEnemyDeathTarget.Set(10);	// 敵の目標死亡数
}