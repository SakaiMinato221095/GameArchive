
//================================================
//=
//=	パンチのフィニッシュ攻撃処理[finish_punch.cpp]
//= Author Sakai Minato
//=
//================================================

//=======================================
//=	インクルード
//=======================================

#include "finish_punch.h"

#include "coll.h"
#include "mgr_coll.h"

//=======================================
//=	マクロ定義
//=======================================

//=======================================
//=	静的変数宣言
//=======================================

//-------------------------------------
//-	タイマーのコンストラクタ
//-------------------------------------
CFinishPunch::CFinishPunch()
{

}

//-------------------------------------
//-	タイマーのデストラクタ
//-------------------------------------
CFinishPunch::~CFinishPunch()
{

}

//-------------------------------------
//- タイマーの初期化処理
//-------------------------------------
HRESULT CFinishPunch::Init(void)
{
	// 親クラスの初期化処理
	if (CAttack::Init() == E_FAIL)
	{
		return E_FAIL;
	}

	// 成功を返す
	return S_OK;
}

//-------------------------------------
//- タイマーの終了処理
//-------------------------------------
void CFinishPunch::Uninit(void)
{
	// 親クラスの終了処理
	CAttack::Uninit();
}

//-------------------------------------
//- タイマーの更新処理
//-------------------------------------
void CFinishPunch::Update(void)
{
	// 親クラスの更新処理
	CAttack::Update();
}

//-------------------------------------
//- タイマーの描画処理
//-------------------------------------
void CFinishPunch::Draw(void)
{
	// 親クラスの描画処理
	CAttack::Draw();
}

//-------------------------------------
//- タイマーの初期設定処理
//-------------------------------------
void CFinishPunch::InitSet(D3DXVECTOR3 pos, D3DXVECTOR3 size, int nDamage, CMgrColl::TAG tagTgt)
{
	// 親クラスの初期設定処理
	CAttack::InitSet(pos, size, nDamage, tagTgt);

	// ターゲットを敵に設定
	SetTagTgt(CMgrColl::TAG_ENEMY);
}

//-------------------------------------
//- タイマーの生成処理
//-------------------------------------
CFinishPunch* CFinishPunch::Create(void)
{
	// 生成処理
	CFinishPunch* pPunch = DBG_NEW CFinishPunch;

	// 生成の成功の有無を判定
	if (pPunch != NULL)
	{
		// 初期化処理
		if (FAILED(pPunch->Init()))
		{// 失敗時

			// 「なし」を返す
			return NULL;
		}
	}
	else if (pPunch == NULL)
	{// 失敗時

		// 「なし」を返す
		return NULL;
	}

	// ポインタを返す
	return pPunch;
}

